var fs = require("fs");
var Canvas = require("canvas");


var ruleNumber =  Math.floor(Math.random() * Math.floor(256));
var randomInitialState = Math.floor(Math.random() * Math.floor(2));

function applyRule(left_parent, middle_parent, right_parent, rule_number) {

    var input = parseInt((left_parent ? "1" : "0") +  (middle_parent ? "1" : "0") +  (right_parent ? "1" : "0"), 2);

    return getRule(rule_number)[input];
}

function getColumnNumber(i, width) {
    return  (i % (width * 4)) / 4;
}


function getLeftParent(i, data, width) { // wrap to last element of parent line if at start of row
    if (getColumnNumber(i) == 0) {
	return data[i - 4] != 255;
    } else {
	return data[i - ((width * 4) + 4)] != 255;
    }
}

function getMiddleParent(i, data, width) {
    return data[i - (width * 4)] != 255;
}

function getRightParent(i, data, width) { // wrap to last element of parent line if at start of row
    if (getColumnNumber(i, width) == width - 1) {
	return data[i - ((width * 4) + (getColumnNumber(i, width) * 4))] != 255;
    } else {
	return data[i - ((width * 4) - 4)] != 255;
    }
}

function getRule(ruleNumber) {
    var rule = [0,0,0,0,0,0,0,0];
    var binaryRuleNumber = ruleNumber.toString(2).split("").reverse();
    for (var i = 0; i < binaryRuleNumber.length; i++) {
	rule[i] = binaryRuleNumber[i] == '1' ? 255 : 0;
    }
    return rule;
}



function drawGrid(ruleNumber, randomInitialState, width, height, cellSize) {

    var canvas = Canvas.createCanvas(width, height, "png");//document.getElementById("foo");
    var ctxt =  canvas.getContext("2d");
    
    var imageData = ctxt.getImageData(0, 0, ctxt.canvas.height, ctxt.canvas.width);
    
    
    
    var data = imageData.data;
    
    
    for (var i=0; i < data.length; i += (4 * cellSize)) {
	var fill;
	if (i < ctxt.canvas.width * (4 * cellSize) - cellSize) {
	    if (randomInitialState == 1) {
		fill = Math.floor(Math.random() * 2)  == 1;
	    } else {
		if (i == (ctxt.canvas.width / 2) * (4 * cellSize)) {
		    fill = 1;
		} else {
		    fill = 0;
		}
	    }
	} else {
	    
	    
	    var left_parent = getLeftParent(i, data, width);
	    var middle_parent = getMiddleParent(i, data, width);
	    var right_parent = getRightParent(i, data, width);
	    fill = applyRule(left_parent, middle_parent, right_parent, ruleNumber);
	}
	
	data[i + 0] = fill ? 0 : 255;    // R value
	data[i + 1] = fill ? 0 : 255;  // G value
	data[i + 2] = fill ? 0 : 255;    // B value
	data[i + 3] = 255;  // A value
    }

    imageData = Canvas.createImageData(data, ctxt.canvas.width, ctxt.canvas.height);


    ctxt.putImageData(imageData, 0, 0);


    var buf = canvas.toBuffer();
    fs.writeFileSync("test.png", buf);



}

drawGrid(ruleNumber, randomInitialState, 1024, 1024, 1);

var altText = "A 1024 x 1024 pixel image, in black and white, generated by the application of elementary cellular automata rules to an intitial seed state. In this image, \"rule " + ruleNumber +"\"";
if  (randomInitialState == 1) {
    altText = altText + " is applied to an intial row of randomly filled cells.";
} else {
  altText = altText + " is applied to a single seed cell in the exact middle of the image's first row.";
}

console.log(altText);



